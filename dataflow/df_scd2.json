{
	"name": "df_scd2",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_src_product",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "ds_src_catageory",
						"type": "DatasetReference"
					},
					"name": "source2"
				},
				{
					"dataset": {
						"referenceName": "ds_src_brands",
						"type": "DatasetReference"
					},
					"name": "source3"
				},
				{
					"dataset": {
						"referenceName": "ds_tgt_product",
						"type": "DatasetReference"
					},
					"name": "source4"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_tgt_product",
						"type": "DatasetReference"
					},
					"name": "sink1"
				},
				{
					"dataset": {
						"referenceName": "ds_tgt_product",
						"type": "DatasetReference"
					},
					"name": "sink2"
				}
			],
			"transformations": [
				{
					"name": "join1"
				},
				{
					"name": "join2"
				},
				{
					"name": "select1"
				},
				{
					"name": "SRCHASH"
				},
				{
					"name": "sort1"
				},
				{
					"name": "sort2"
				},
				{
					"name": "TGTHASH"
				},
				{
					"name": "exists1"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "alterRow1"
				},
				{
					"name": "filter1"
				},
				{
					"name": "exists3"
				},
				{
					"name": "derivedColumn2"
				},
				{
					"name": "alterRow2"
				}
			],
			"scriptLines": [
				"source(output(",
				"          product_id as integer,",
				"          product_name as string,",
				"          brand_id as integer,",
				"          category_id as integer,",
				"          model_year as short,",
				"          list_price as decimal(10,2)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> source1",
				"source(output(",
				"          category_id as integer,",
				"          category_name as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> source2",
				"source(output(",
				"          brand_id as integer,",
				"          brand_name as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> source3",
				"source(output(",
				"          PRODUCT_ID as integer,",
				"          PRODUCT_NAME as string,",
				"          MODEL_YEAR as integer,",
				"          LIST_PRICE as decimal(10,2),",
				"          CATEGORY_NAME as string,",
				"          BRAND_NAME as string,",
				"          START_DATE as timestamp,",
				"          END_DATE as timestamp,",
				"          IS_ACTIVE as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> source4",
				"source1, source2 join(source1@category_id == source2@category_id,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1, source3 join(source1@brand_id == source3@brand_id,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join2",
				"join2 select(mapColumn(",
				"          product_id,",
				"          product_name,",
				"          model_year,",
				"          list_price,",
				"          category_name,",
				"          brand_name",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"sort1 derive(SRCHASH = md5(product_id,product_name)) ~> SRCHASH",
				"select1 sort(asc(product_id, true)) ~> sort1",
				"filter1 sort(asc(PRODUCT_ID, true)) ~> sort2",
				"sort2 derive(TGTHASH = md5(PRODUCT_ID,PRODUCT_NAME)) ~> TGTHASH",
				"SRCHASH, TGTHASH exists(SRCHASH == TGTHASH,",
				"     negate:true,",
				"     broadcast: 'both')~> exists1",
				"exists1 derive(eff_start_date = currentTimestamp(),",
				"          eff_end_date = toDate('2099-12-31'),",
				"          active_flag = 'Y') ~> derivedColumn1",
				"derivedColumn1 alterRow(upsertIf(1==1)) ~> alterRow1",
				"source4 filter(IS_ACTIVE=='Y') ~> filter1",
				"TGTHASH, SRCHASH exists(source4@PRODUCT_ID==select1@product_id&&notEquals(SRCHASH, TGTHASH),",
				"     negate:false,",
				"     broadcast: 'auto')~> exists3",
				"exists3 derive(eff_end_date = currentTimestamp(),",
				"          eff_start_date = currentTimestamp()-1,",
				"          is_active = 'N') ~> derivedColumn2",
				"derivedColumn2 alterRow(updateIf(1==1)) ~> alterRow2",
				"alterRow1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          PRODUCT_ID as integer,",
				"          PRODUCT_NAME as string,",
				"          MODEL_YEAR as integer,",
				"          LIST_PRICE as decimal(10,2),",
				"          CATEGORY_NAME as string,",
				"          BRAND_NAME as string,",
				"          START_DATE as timestamp,",
				"          END_DATE as timestamp,",
				"          IS_ACTIVE as string",
				"     ),",
				"     deletable:false,",
				"     insertable:false,",
				"     updateable:false,",
				"     upsertable:true,",
				"     keys:['PRODUCT_ID','PRODUCT_NAME'],",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          PRODUCT_ID = product_id,",
				"          PRODUCT_NAME = product_name,",
				"          MODEL_YEAR = model_year,",
				"          LIST_PRICE = list_price,",
				"          CATEGORY_NAME = category_name,",
				"          BRAND_NAME = brand_name,",
				"          START_DATE = eff_start_date,",
				"          END_DATE = eff_end_date,",
				"          IS_ACTIVE = active_flag",
				"     )) ~> sink1",
				"alterRow2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          PRODUCT_ID as integer,",
				"          PRODUCT_NAME as string,",
				"          MODEL_YEAR as integer,",
				"          LIST_PRICE as decimal(10,2),",
				"          CATEGORY_NAME as string,",
				"          BRAND_NAME as string,",
				"          START_DATE as timestamp,",
				"          END_DATE as timestamp,",
				"          IS_ACTIVE as string",
				"     ),",
				"     deletable:false,",
				"     insertable:false,",
				"     updateable:true,",
				"     upsertable:false,",
				"     keys:['PRODUCT_ID'],",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          PRODUCT_ID,",
				"          PRODUCT_NAME,",
				"          MODEL_YEAR,",
				"          LIST_PRICE,",
				"          CATEGORY_NAME,",
				"          BRAND_NAME,",
				"          START_DATE = eff_start_date,",
				"          END_DATE = eff_end_date,",
				"          IS_ACTIVE = derivedColumn2@is_active",
				"     )) ~> sink2"
			]
		}
	}
}